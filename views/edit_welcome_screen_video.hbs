<div class="container">
  <img class="current_image_with_nav" src="/images/cinq_background_without_logo.png"/>
  <div id="new_welcome_screen_form" class="row centered-form">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
      <div class="panel panel-default">
        <div class="panel-heading">
          <h3 class="panel-title">Edit Welcome Screen</h3>
        </div>
        <div class="panel-body">
          <form id="update_form">
            <div class="row">
              <div class="col-xs-6 col-sm-6 col-md-6">
                <div class="form-group flt_left">
                  {{#if isDefaultVideo}}
                    <label for="defaultVideo" class="flt_right vsb_hidden">&nbsp Default video as Welcome Screen</label>
                    <input type="checkbox" class="flt_right vsb_hidden" name="defaultVideo" id="defaultVideo" checked>
                  {{else}}
                    <label for="defaultVideo" class="flt_right vsb_hidden">&nbsp Default video as Welcome Screen</label>
                    <input type="checkbox" class="flt_right vsb_hidden" name="defaultVideo" id="defaultVideo">
                  {{/if}}
                </div>
              </div>
              <div class="col-xs-6 col-sm-6 col-md-6">
                <div class="form-group">
                  <label id="isEnableLabel" for="isEnable" class="flt_right"></label>
                  <input type="checkbox"class="flt_right" name="isEnable" id="isEnable">
                </div>
              </div>
              <div class="col-xs-12 col-sm-12 col-md-12">
                <div class="form-group">
                  <label for="title">Current video title</label>
                  {{#if isDefaultVideo}}
                    <input type="text" name="title" id="title" class="form-control input-sm" placeholder="Title" value="{{screenVideo.title}}" disabled>
                  {{else}}
                    <input type="text" name="title" id="title" class="form-control input-sm" placeholder="Title" value="{{screenVideo.title}}">
                  {{/if}}
                </div>
              </div>
              <div class="col-xs-12 col-sm-12 col-md-12">
                <div class="form-group">
                  <label for="video" id="currentVideo">Current video: {{screenVideo.defaultVideoName}}</label>
                  <label id="videoName" class="vsb_hidden">{{screenVideo.videoName}}</label>
                  <br/>
                  <label for="video">Choose a new video</label>
                  {{#if isDefaultVideo}}
                    <input type="file" name="video" value="{{screenVideo.videoName}}" id="video" class="form-control input-sm" placeholder="Video" disabled>
                  {{else}}
                    <input type="file" name="video" id="video" class="form-control input-sm" placeholder="Video">
                  {{/if}}
                </div>
              </div>
              {{#checkIsProgrammed screenVideo}}
              {{/checkIsProgrammed}} 
            <input type="submit" value="Update" class="btn btn-info col-xs-6 col-sm-6 col-md-6 col-lg-6">
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const Toast = Swal.mixin({
    toast: true,
    position: 'top',
    showConfirmButton: false,
    timer: 3000
  });
  const socket = io();
  const actualDate = new Date();
  const dateNow = getTodaysDatePlusOne(actualDate);
  const dateTomorrow = getTomorrowsDate(actualDate);
  const initialStartDate = `{{screenVideo.startDate}}`;
  const initialEndDate = `{{screenVideo.endDate}}`;
  const compareDate = FormatDate(initialStartDate) <= FormatDate(new Date());
  let dateStart = initialStartDate;
  let dateEnd = initialEndDate;
  let startDateFormatted = initialStartDate;
  let expirationDateFormatted = initialEndDate;
  let oldTitle = $('#title').val();
  let currentVideo = $('#currentVideo').text();
  let formatedDate = formatDateBeauty(dateNow);
  let expirationDate = formatDateBeauty(dateTomorrow);
  
  $(document).ready(() => {
    if (`{{isEnabled}}` === 'programmed') {
      checkBoxCheck('programmed', initialStartDate, initialEndDate);
    } else if (`{{{isEnabled}}}` === 'true' && compareDate === false) {
      checkBoxCheck('true', initialStartDate, initialEndDate);
    } else if (`{{{isEnabled}}}` === 'false') {
      checkBoxCheck('false', initialStartDate, initialEndDate);
    } else if (`{{{isEnabled}}}` === 'true' && compareDate === true) {
      checkBoxCheck('activated', initialStartDate, initialEndDate);
    }
  });

  $("#title").on("paste keyup change focusout", function() {
    addAndRemoveClassConditional("#title", "emptyFields", "fulfilledFields");
  });

  $("#video").on("paste keyup change focusout", function() {
    addAndRemoveClassConditional("#video", "emptyFields", "fulfilledFields");
  });

  $("#startDate").on("paste keyup change focusout", function() {
    addAndRemoveClassConditional("#startDate", "emptyFields", "fulfilledFields");
  });

  $("#endDate").on("paste keyup change focusout", function() {
    addAndRemoveClassConditional("#endDate", "emptyFields", "fulfilledFields");
  });

  $('#isEnable').change(function() {
    changeCheckBoxLabelText("#isEnableLabel", $(this).is(':checked'));
  });

  $('#currentVideo').change(function() {
    currentVideo = $('#currentVideo').text();
  });

  $('#defaultVideo').change(function() {
    if ($(this).is(':checked')) {
      $('#video').prop('disabled', true);
      $('#title').prop('disabled', true);
      $('#title').prop('value', 'Default video');
      $('#currentVideo').text('Current video: default_video.mp4');
    } else {
      $('#video').prop('disabled', false);
      $('#title').prop('disabled', false);
      $('#title').prop('value', '');
      $('#currentVideo').text(currentVideo);
    }
  });

  $("#isEnable").on("change", function() {
    if ($(this).is(':checked')) {
      unableDisableSchedule('disabled');
    } else {
      unableDisableSchedule('enabled');
    }
  });

  $("#startScheduleWs").on("change", function() {
    if ($(this).is(':checked')) {
      unableDisableSchedule('programmed');
    } else {
      unableDisableSchedule('disabled');
      $("#startDate").val('');
      $("#endDate").val('');
    }
  });

  $('#startDate').datepicker({
    dateTimeSeparator: " - ",
    clearButton: true,
    minDate: dateNow,
    minHours: dateNow,
    onSelect: function(fd, d, picker) {
      dateStart = d;
      monthStart = getCorrectMonth(d);
      yearStart = formatYear(d);
      startDate = formatDateToEnroll(d, monthStart, yearStart);
      startDateFormatted = d;
      checkTime();
      if (dateEnd == '')
        addAndRemoveClassSimple('#endDate', 'emptyFields', 'fulfilledFields');
    }
  });

  $('#endDate').datepicker({
    dateTimeSeparator: " - ",
    clearButton: true,
    minDate: dateTomorrow,
    minHours: dateTomorrow,
    onSelect: function(fd, d, picker) {
      dateEnd = d;
      monthFinish = getCorrectMonth(d);
      yearFinish = formatYear(d);
      finishDate = formatDateToEnroll(d, monthFinish, yearFinish);
      expirationDateFormatted = d;
      checkTime();
      if (dateStart == '')
        addAndRemoveClassSimple('#startDate', 'emptyFields', 'fulfilledFields');
    }
  });

  $('#update_form').submit(function(e) {
    e.preventDefault();

    const isScheduled = $("#startScheduleWs").is(':checked');
    const defaultText = 'Current video: default_video.mp4';
    const videoSize = $('#video').get(0).files.length;
    const isDefaultVideo = $('#defaultVideo').is(':checked');
    const titleNotEmpty = $('#title').val() != '' && $('#title').val() != ' ';
    const startDateEmptyOrNull = $("#startDate").val() !== '' && $("#startDate").val() !== ' ';
    const startDateInvalid = $("#startDate").val() === '' || $("#startDate").val() === ' ';
    const endDateEmptyOrNull = $("#endDate").val() !== '' && $("#endDate").val() !== ' ';
    const endDateInvalid = $("#endDate").val() === '' || $("#endDate").val() === ' ';
    const defaultVideo = currentVideo === defaultText && videoSize !== 0;
    const notDefaultVideo = currentVideo !== defaultText && videoSize === 0;
    const newVideo = currentVideo !== defaultText && videoSize !== 0;
    const scheduledTime = isScheduled && startDateEmptyOrNull;
    const scheduledTimeFinish = isScheduled && endDateEmptyOrNull;
    const startTimeEmpty = isScheduled && startDateInvalid;
    const finishTimeEmpty = isScheduled && endDateInvalid;
    const videoSettingsToCheck = isDefaultVideo || defaultVideo || notDefaultVideo || newVideo;
    const timeSettingsToCheck = scheduledTime && scheduledTimeFinish && checkTime();
    const scheduleSettingsToCheck = !isScheduled && startDateInvalid && endDateInvalid;

    if (titleNotEmpty && videoSettingsToCheck && ((scheduledTime && scheduledTimeFinish && checkTime()) || (!isScheduled && startDateInvalid && endDateInvalid))) {
      $("#title").addClass('fulfilledFields');
      $("#video").addClass('fulfilledFields');

      const schedule = checkSchedule(isScheduled);
      const videoName = $('#videoName').text();

      var formData = new FormData($(this)[0]);
      
      $.ajax({
        url: `/api/update_welcome_screen_video/{{{screenVideo._id}}}/${videoName}/${currentVideo.slice(15)}/${schedule}`,
        type: 'PUT',
        data: formData,
        async: false,
        contentType: false,
        cache: false,
        enctype: 'multipart/form-data',
        processData: false,
        success: (data) => {
          Swal.fire({
            title: 'Success',
            text: 'Welcome Screen updated successfully!',
            type: 'success',
            confirmButtonText: 'OK, keep going!',
            confirmButtonColor: '#EE9658'
          }).then(result => {
            window.location.href = "/welcome_screens_list"
          });
        },
        error: () => {
          Swal.fire({
            title: 'Sorry',
            text: 'An issue has occurred :(',
            type: 'error',
            confirmButtonColor: '#EE9658'
          });
        }
      });
    } else {
      if (titleNotEmpty === false && notDefaultVideo === true) {
        $("#title").addClass('emptyFields');
      }
      
      if (titleNotEmpty === false && notDefaultVideo === false) {
        $("#title").addClass('emptyFields');
        $("#video").addClass('emptyFields');
      }

      if (startTimeEmpty) {
        addAndRemoveClassSimple("#startDate", "emptyFields", "fulfilledFields");
      }
      if (finishTimeEmpty) {
        addAndRemoveClassSimple("#endDate", "emptyFields", "fulfilledFields");
      }

      Swal.fire({
        title: 'Attention',
        text: 'Please check the fields!',
        type: 'warning',
        confirmButtonColor: '#EE9658'
      });
    }

    socket.emit('UpdateOnDatabase');
  });
</script>